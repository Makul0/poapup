// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Collection details
  name          String
  description   String?
  isOfficial    Boolean @default(false)
  
  // Collection metadata
  website       String?
  twitter       String?
  discord       String?
  logo          String?

  // Collection stats
  totalPoaps     Int      @default(0)
  uniqueHolders  Int      @default(0)
  lastEventDate  DateTime?
  isActive       Boolean  @default(true)

  // Relationships
  events        Event[]        // Events in this collection
  creatorAccess CreatorAccess[]

  @@index([name])
  Poap Poap[]
}

model Event {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Event details
  name        String
  description String?
  month       String      // Store month name explicitly
  year        Int         // Store year explicitly
  eventType   EventType   @default(VIRTUAL)
  location    String?
  maxSupply   Int?

  // Event identifiers
  mintAuthority  String    // The mint authority for this specific event
  collectionAddr String    // The collection address for this specific event
  
  startDate   DateTime
  endDate     DateTime
  
  // Event metadata
  website     String?
  coverImage  String?

  // Event status
  isActive    Boolean  @default(true)
  isClosed    Boolean  @default(false)
  
  // Relationships
  collection  Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  poaps       Poap[]

  @@index([mintAuthority])
  @@index([collectionAddr])
  @@index([month, year])
  @@index([collectionId])
}

// POAP model represents individual POAPs
model Poap {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // POAP details
  name        String
  description String?
  image       String   // IPFS/Arweave URI
  assetId     String   @unique // Solana Asset ID
  mintAddress String   @unique // Solana mint address

  // POAP status
  isBurned    Boolean  @default(false)
  isFrozen    Boolean  @default(false)

  // Relationships
  collection  Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  event       Event      @relation(fields: [eventId], references: [id])
  eventId     String
  holders     PoapHolder[]

  @@index([collectionId])
  @@index([eventId])
  @@index([assetId])
}

// PoapHolder tracks POAP ownership
model PoapHolder {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Holder details
  walletAddress String
  acquiredAt    DateTime @default(now())

  // Relationships
  poap         Poap     @relation(fields: [poapId], references: [id])
  poapId       String

  @@unique([poapId, walletAddress])
  @@index([walletAddress])
}

// CreatorAccess manages collection creator permissions
model CreatorAccess {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Creator details
  walletAddress String
  role         CreatorRole @default(CREATOR)
  isActive     Boolean     @default(true)

  // Access scope
  canCreateEvents Boolean @default(true)
  canMintPoaps   Boolean @default(true)
  canEditDetails Boolean  @default(false)

  // Relationships
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String

  @@unique([collectionId, walletAddress])
}

enum EventType {
  VIRTUAL
  IN_PERSON
  HYBRID
}

enum CreatorRole {
  ADMIN
  CREATOR
  MODERATOR
}