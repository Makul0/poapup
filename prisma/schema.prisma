// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Collection model represents POAP collections 
model Collection {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Collection details
  name          String
  description   String?
  mintAuthority String  @unique // Solana public key
  isOfficial    Boolean @default(false)
  
  // Collection metadata
  website       String?
  twitter       String?
  discord       String?
  logo          String? // IPFS URI

  // Collection stats
  totalPoaps     Int      @default(0)
  uniqueHolders  Int      @default(0)
  lastEventDate  DateTime?
  isActive       Boolean  @default(true)

  // Collection verification
  verifiedAt    DateTime?
  verifiedBy    String?   // Admin wallet that verified

  // Relationships
  poaps         Poap[]         // All POAPs in collection
  events        Event[]        // Events in this collection
  creatorAccess CreatorAccess[]

  @@index([mintAuthority])
}

// Event model represents individual POAP events
model Event {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Event details
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  eventType   EventType @default(VIRTUAL)
  location    String?
  maxSupply   Int?

  // Event metadata
  website     String?
  coverImage  String? // IPFS URI

  // Event status
  isActive    Boolean  @default(true)
  isClosed    Boolean  @default(false)
  
  // Relationships
  collection  Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  poaps       Poap[]

  @@index([startDate, endDate])
  @@index([collectionId])
}

// POAP model represents individual POAPs
model Poap {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // POAP details
  name        String
  description String?
  image       String   // IPFS URI
  assetId     String   @unique // Solana Asset ID
  mintAddress String   @unique // Solana mint address

  // POAP status
  isBurned    Boolean  @default(false)
  isFrozen    Boolean  @default(false)

  // Relationships
  collection  Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  event       Event      @relation(fields: [eventId], references: [id])
  eventId     String
  holders     PoapHolder[]

  @@index([collectionId])
  @@index([eventId])
  @@index([assetId])
}

// PoapHolder tracks POAP ownership
model PoapHolder {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Holder details
  walletAddress String
  acquiredAt    DateTime @default(now())

  // Relationships
  poap         Poap     @relation(fields: [poapId], references: [id])
  poapId       String

  @@unique([poapId, walletAddress])
  @@index([walletAddress])
}

// CreatorAccess manages collection creator permissions
model CreatorAccess {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Creator details
  walletAddress String
  role         CreatorRole @default(CREATOR)
  isActive     Boolean     @default(true)

  // Access scope
  canCreateEvents Boolean @default(true)
  canMintPoaps   Boolean @default(true)
  canEditDetails Boolean  @default(false)

  // Relationships
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String

  @@unique([collectionId, walletAddress])
}

enum EventType {
  VIRTUAL
  IN_PERSON
  HYBRID
}

enum CreatorRole {
  ADMIN
  CREATOR
  MODERATOR
}