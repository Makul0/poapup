// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Basic collection information
  name        String
  description String?
  symbol      String?  // For on-chain identification
  
  // Collection metadata
  website     String?
  twitter     String?
  discord     String?
  logo        String?  // IPFS/Arweave URI
  
  // Collection configuration
  isOfficial  Boolean @default(false)
  isActive    Boolean @default(true)
  isVerified  Boolean @default(false)
  
  // Collection statistics
  totalPoaps      Int      @default(0)
  uniqueHolders   Int      @default(0)
  lastEventDate   DateTime?
  
  // Compression configuration
  merkleTree     String?   // Merkle tree address for compressed NFTs
  maxDepth       Int?      // Tree depth for compression
  maxBufferSize  Int?      // Buffer size for concurrent operations
  canopyDepth    Int?      // Canopy depth for optimizations

  // Relationships
  events         Event[]
  poaps          Poap[]
  creatorAccess  CreatorAccess[]

  @@index([name])
  @@index([isOfficial, isActive])
}

model Event {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Event details
  name        String
  description String?
  eventType   EventType @default(VIRTUAL)
  
  // Event timing
  startDate   DateTime
  endDate     DateTime
  month       String    // Stored explicitly for easier querying
  year        Int      // Stored explicitly for easier querying
  
  // Event configuration
  location    String?
  maxSupply   Int?
  mintPrice   Float?   // In SOL
  
  // Event identifiers
  mintAuthority String  // Authority allowed to mint POAPs
  
  // Event metadata
  website     String?
  coverImage  String?  // IPFS/Arweave URI
  
  // Event status
  isActive    Boolean @default(true)
  isClosed    Boolean @default(false)

  // Relationships
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  poaps        Poap[]

  @@index([month, year])
  @@index([startDate, endDate])
  @@index([collectionId])
  @@index([mintAuthority])
}

model Poap {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // POAP details
  name        String
  description String?
  image       String   // IPFS/Arweave URI
  
  // On-chain identifiers
  assetId     String  @unique  // Solana Asset ID (for compressed NFTs)
  mintAddress String? @unique  // Optional mint address (for decompressed NFTs)
  
  // POAP metadata
  attributes  Json?   // Additional metadata attributes
  
  // POAP status
  isBurned    Boolean @default(false)
  isFrozen    Boolean @default(false)
  isCompressed Boolean @default(true)

  // Relationships
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  event        Event     @relation(fields: [eventId], references: [id])
  eventId      String
  holders      PoapHolder[]

  @@index([collectionId])
  @@index([eventId])
  @@index([assetId])
}

model PoapHolder {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Holder details
  walletAddress String
  acquiredAt    DateTime @default(now())
  
  // Transfer details
  transferredAt DateTime?
  transferredTo String?

  // Relationships
  poap          Poap    @relation(fields: [poapId], references: [id])
  poapId        String

  @@unique([poapId, walletAddress])
  @@index([walletAddress])
}

model CreatorAccess {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Creator identification
  walletAddress String
  role          CreatorRole @default(CREATOR)
  
  // Access status
  isActive      Boolean     @default(true)
  
  // Permissions
  canCreateEvents Boolean @default(true)
  canMintPoaps   Boolean @default(true)
  canEditDetails Boolean  @default(false)
  canVerify     Boolean  @default(false)

  // Relationships
  collection    Collection @relation(fields: [collectionId], references: [id])
  collectionId  String

  @@unique([collectionId, walletAddress])
}

enum EventType {
  VIRTUAL
  IN_PERSON
  HYBRID
}

enum CreatorRole {
  ADMIN
  CREATOR
  MODERATOR
}